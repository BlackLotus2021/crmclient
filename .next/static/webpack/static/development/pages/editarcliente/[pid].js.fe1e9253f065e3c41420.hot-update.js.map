{"version":3,"file":"static/webpack/static\\development\\pages\\editarcliente\\[pid].js.fe1e9253f065e3c41420.hot-update.js","sources":["webpack:///./pages/editarcliente/[pid].js"],"sourcesContent":["import React from 'react';\nimport { useRouter } from 'next/router'\nimport Layout from '../../components/Layout';\nimport { useQuery, gql, useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2';\n\nconst OBTENER_CLIENTE = gql`\n    query obtenerCliente($id:ID!) {\n        obtenerCliente(id:$id) {\n            nombre\n            apellido\n            direccion\n            email\n            telefono\n            empresa\n        }\n    }\n`;\n\nconst ACTUALIZAR_CLIENTE = gql`\n    mutation actualizarCliente($id: ID!, $input: ClienteInput) {\n        actualizarCliente(id: $id, input: $input) {\n            nombre\n            email\n        }\n    }\n`;\n\nconst EditarCliente = () => {\n    // obtener el ID actual\n    const router = useRouter();\n    const { query: { id } } = router;\n    // console.log(id)\n\n    // Consultar para obtener el cliente\n    const { data, loading, error } = useQuery(OBTENER_CLIENTE, {\n        variables: {\n            id\n        }\n    });\n\n    // Actualizar el cliente\n    const [actualizarCliente] = useMutation(ACTUALIZAR_CLIENTE);\n\n    // Schema de validacion\n    const schemaValidacion = Yup.object({\n        nombre: Yup.string()\n            .required('El nombre del cliente es obligatorio'),\n        apellido: Yup.string()\n            .required('El apellido del cliente es obligatorio'),\n        empresa: Yup.string()\n            .required('El campo empresa  es obligatorio'),\n        email: Yup.string()\n            .email('Email no v치lido')\n            .required('El email del cliente es obligatorio'),\n        direccion: Yup.string()\n            .required('La direccion del cliente es obligatorio'),\n    });\n\n\n    if (loading) return 'Cargando...';\n\n    // console.log(data.obtenerCliente)\n\n    const { obtenerCliente } = data;\n\n    // Modifica el cliente en la BD\n    const actualizarInfoCliente = async valores => {\n        const { nombre, apellido, direccion, ciudad, pais, empresa, email, telefono } = valores;\n\n        try {\n            const { data } = await actualizarCliente({\n                variables: {\n                    id,\n                    input: {\n                        nombre,\n                        apellido,\n                        direccion,\n                        ciudad,\n                        pais,\n                        empresa,\n                        email,\n                        telefono\n                    }\n                }\n            });\n\n            // console.log(data);\n\n            // Mostrar Alerta\n            Swal.fire(\n                'Actualizado',\n                'El cliente se actualiz칩 correctamente',\n                'success'\n            )\n\n            // Redireccionar\n            router.push('/');\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    return (\n        <Layout>\n            <h1 className=\"text-2xl text-gray-800 font-light\">Editar Cliente</h1>\n\n            <div className=\"flex justify-center mt-5\">\n                <div className=\"w-full max-w-lg\">\n\n                    <Formik\n                        validationSchema={schemaValidacion}\n                        enableReinitialize\n                        initialValues={obtenerCliente}\n                        onSubmit={(valores) => {\n                            actualizarInfoCliente(valores)\n                        }}\n                    >\n\n                        {props => {\n                            // console.log(props);\n                            return (\n                                <form\n                                    className=\"bg-white shadow-md px-8 pt-6 pb-8 mb-4\"\n                                    onSubmit={props.handleSubmit}\n                                >\n                                    <div className=\"mb-4\">\n                                        <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"nombre\">\n                                            Nombre\n                                        </label>\n\n                                        <input\n                                            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                                            id=\"nombre\"\n                                            type=\"text\"\n                                            placeholder=\"Nombre Cliente\"\n                                            onChange={props.handleChange}\n                                            onBlur={props.handleBlur}\n                                            value={props.values.nombre}\n                                        />\n                                    </div>\n\n                                    { props.touched.nombre && props.errors.nombre ? (\n                                        <div className=\"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\" >\n                                            <p className=\"font-bold\">Error</p>\n                                            <p>{props.errors.nombre}</p>\n                                        </div>\n                                    ) : null}\n\n                                    <div className=\"mb-4\">\n                                        <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"apellido\">\n                                            Apellido\n                                        </label>\n\n                                        <input\n                                            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                                            id=\"apellido\"\n                                            type=\"text\"\n                                            placeholder=\"Apellido Cliente\"\n                                            onChange={props.handleChange}\n                                            onBlur={props.handleBlur}\n                                            value={props.values.apellido}\n                                        />\n                                    </div>\n\n                                    { props.touched.apellido && props.errors.apellido ? (\n                                        <div className=\"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\" >\n                                            <p className=\"font-bold\">Error</p>\n                                            <p>{props.errors.apellido}</p>\n                                        </div>\n                                    ) : null}\n\n                                    <div className=\"mb-4\">\n                                        <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"nombre\">\n                                            Direcci칩n\n                                        </label>\n\n                                        <input\n                                            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                                            id=\"direccion\"\n                                            type=\"text\"\n                                            placeholder=\"Direcci칩n Cliente\"\n                                            onChange={props.handleChange}\n                                            onBlur={props.handleBlur}\n                                            value={props.values.direccion}\n                                        />\n                                    </div>\n\n                                    { props.touched.direccion && props.errors.direccion ? (\n                                        <div className=\"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\" >\n                                            <p className=\"font-bold\">Error</p>\n                                            <p>{props.errors.direccion}</p>\n                                        </div>\n                                    ) : null}\n\n                                    <div className=\"mb-4\">\n                                        <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"ciudad\">\n                                            Ciudad\n                                        </label>\n\n                                        <input\n                                            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                                            id=\"ciudad\"\n                                            type=\"text\"\n                                            placeholder=\"Ciudad Cliente\"\n                                            onChange={props.handleChange}\n                                            onBlur={props.handleBlur}\n                                            value={props.values.ciudad}\n                                        />\n                                    </div>\n\n                                    { props.touched.ciudad && props.errors.ciudad ? (\n                                        <div className=\"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\" >\n                                            <p className=\"font-bold\">Error</p>\n                                            <p>{props.errors.ciudad}</p>\n                                        </div>\n                                    ) : null}\n\n                                    <div className=\"mb-4\">\n                                        <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"pais\">\n                                            Pais\n                                        </label>\n\n                                        <input\n                                            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                                            id=\"pais\"\n                                            type=\"text\"\n                                            placeholder=\"Pais Cliente\"\n                                            onChange={props.handleChange}\n                                            onBlur={props.handleBlur}\n                                            value={props.values.pais}\n                                        />\n                                    </div>\n\n                                    { props.touched.nombre && props.errors.pais ? (\n                                        <div className=\"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\" >\n                                            <p className=\"font-bold\">Error</p>\n                                            <p>{props.errors.pais}</p>\n                                        </div>\n                                    ) : null}\n\n                                    <div className=\"mb-4\">\n                                        <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"empresa\">\n                                            Empresa\n                                        </label>\n\n                                        <input\n                                            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                                            id=\"empresa\"\n                                            type=\"text\"\n                                            placeholder=\"Empresa Cliente\"\n                                            onChange={props.handleChange}\n                                            onBlur={props.handleBlur}\n                                            value={props.values.empresa}\n                                        />\n                                    </div>\n\n                                    { props.touched.empresa && props.errors.empresa ? (\n                                        <div className=\"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\" >\n                                            <p className=\"font-bold\">Error</p>\n                                            <p>{props.errors.empresa}</p>\n                                        </div>\n                                    ) : null}\n\n                                    <div className=\"mb-4\">\n                                        <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"email\">\n                                            Email\n                                        </label>\n\n                                        <input\n                                            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                                            id=\"email\"\n                                            type=\"email\"\n                                            placeholder=\"Email Cliente\"\n                                            onChange={props.handleChange}\n                                            onBlur={props.handleBlur}\n                                            value={props.values.email}\n                                        />\n                                    </div>\n\n                                    { props.touched.email && props.errors.email ? (\n                                        <div className=\"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\" >\n                                            <p className=\"font-bold\">Error</p>\n                                            <p>{props.errors.email}</p>\n                                        </div>\n                                    ) : null}\n\n                                    <div className=\"mb-4\">\n                                        <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"telefono\">\n                                            Tel칠fono\n                                        </label>\n\n                                        <input\n                                            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                                            id=\"telefono\"\n                                            type=\"tel\"\n                                            placeholder=\"Tel칠fono Cliente\"\n                                            onChange={props.handleChange}\n                                            onBlur={props.handleBlur}\n                                            value={props.values.telefono}\n                                        />\n                                    </div>\n\n                                    <input\n                                        type=\"submit\"\n                                        className=\"bg-gray-800 w-full mt-5 p-2 text-white uppercase font-bold hover:bg-gray-900\"\n                                        value=\"Editar Cliente\"\n                                    />\n                                </form>\n                            )\n                        }}\n                    </Formik>\n                </div>\n            </div>\n\n        </Layout>\n    );\n}\n\nexport default EditarCliente;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAaA;AACA;AAQA;AACA;AACA;AAFA;AAMA;AACA;AAPA;AAQA;AACA;AADA;AADA;AAPA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AACA;AAeA;AACA;AAEA;AAEA;AAEA;AAGA;AAVA;AAeA;AACA;AAjCA;AACA;AAsCA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAFA;AADA;AACA;AALA;AAAA;AAIA;AAgBA;AAEA;AACA;AACA;AAMA;AA9BA;AAAA;AACA;AADA;AAAA;AAAA;AAgCA;AACA;AAjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAmsourceRoot":""}